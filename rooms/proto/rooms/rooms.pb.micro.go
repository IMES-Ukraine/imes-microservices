// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/rooms/rooms.proto

package com_github_romatroskin_viqchat_rooms_service_rooms

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Rooms service

func NewRoomsEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Rooms service

type RoomsService interface {
	Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*Response, error)
}

type roomsService struct {
	c    client.Client
	name string
}

func NewRoomsService(name string, c client.Client) RoomsService {
	return &roomsService{
		c:    c,
		name: name,
	}
}

func (c *roomsService) Create(ctx context.Context, in *CreateRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rooms.Create", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomsService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Rooms.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rooms service

type RoomsHandler interface {
	Create(context.Context, *CreateRequest, *Response) error
	List(context.Context, *ListRequest, *Response) error
}

func RegisterRoomsHandler(s server.Server, hdlr RoomsHandler, opts ...server.HandlerOption) error {
	type rooms interface {
		Create(ctx context.Context, in *CreateRequest, out *Response) error
		List(ctx context.Context, in *ListRequest, out *Response) error
	}
	type Rooms struct {
		rooms
	}
	h := &roomsHandler{hdlr}
	return s.Handle(s.NewHandler(&Rooms{h}, opts...))
}

type roomsHandler struct {
	RoomsHandler
}

func (h *roomsHandler) Create(ctx context.Context, in *CreateRequest, out *Response) error {
	return h.RoomsHandler.Create(ctx, in, out)
}

func (h *roomsHandler) List(ctx context.Context, in *ListRequest, out *Response) error {
	return h.RoomsHandler.List(ctx, in, out)
}
