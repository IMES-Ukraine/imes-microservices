// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/messages/messages.proto

package com_github_romatroskin_viqchat_messages_service_messages

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ChatMessages service

func NewChatMessagesEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ChatMessages service

type ChatMessagesService interface {
	Write(ctx context.Context, in *ChatMessage, opts ...client.CallOption) (*Response, error)
	List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*Response, error)
}

type chatMessagesService struct {
	c    client.Client
	name string
}

func NewChatMessagesService(name string, c client.Client) ChatMessagesService {
	return &chatMessagesService{
		c:    c,
		name: name,
	}
}

func (c *chatMessagesService) Write(ctx context.Context, in *ChatMessage, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ChatMessages.Write", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatMessagesService) List(ctx context.Context, in *ListRequest, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "ChatMessages.List", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ChatMessages service

type ChatMessagesHandler interface {
	Write(context.Context, *ChatMessage, *Response) error
	List(context.Context, *ListRequest, *Response) error
}

func RegisterChatMessagesHandler(s server.Server, hdlr ChatMessagesHandler, opts ...server.HandlerOption) error {
	type chatMessages interface {
		Write(ctx context.Context, in *ChatMessage, out *Response) error
		List(ctx context.Context, in *ListRequest, out *Response) error
	}
	type ChatMessages struct {
		chatMessages
	}
	h := &chatMessagesHandler{hdlr}
	return s.Handle(s.NewHandler(&ChatMessages{h}, opts...))
}

type chatMessagesHandler struct {
	ChatMessagesHandler
}

func (h *chatMessagesHandler) Write(ctx context.Context, in *ChatMessage, out *Response) error {
	return h.ChatMessagesHandler.Write(ctx, in, out)
}

func (h *chatMessagesHandler) List(ctx context.Context, in *ListRequest, out *Response) error {
	return h.ChatMessagesHandler.List(ctx, in, out)
}
